// Prisma schema for CRM Subscription Plans and Monetization
// Provider: PostgreSQL (Neon)

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- RBAC Users ---
enum Role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  OWNER
  VENDOR
  TENANT
}

model User {
  id                     String         @id @default(cuid())
  email                  String         @unique
  name                   String?
  role                   Role           @default(TENANT)
  permissions            String?
  autopayEnabled         Boolean        @default(false)
  stripeCustomerId       String?
  defaultPaymentMethodId String?
  orgId                  String
  org                    Organization   @relation(fields: [orgId], references: [id])
  accountId              String
  account                Account       @relation(fields: [accountId], references: [id])
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  // Back-relations
  rentPayments           RentPayment[]  @relation("TenantRentPayments")
  lateFees               LateFee[]      @relation("TenantLateFees")
  refunds                Refund[]       @relation("TenantRefunds")
  autopay                AutoPay?       @relation("TenantAutoPay")
  ownerLedgers           OwnerLedger[]  @relation("OwnerLedgers")
  uploadedDocuments      Document[]     @relation("UserUploadedDocuments")
  vendorInvoices         MaintenanceInvoice[] @relation("VendorMaintenanceInvoices")
  directMessagesSent     DirectMessage[]      @relation("DirectMessagesSent")
  directMessagesReceived DirectMessage[]      @relation("DirectMessagesReceived")

  @@index([orgId])
}

model Organization {
  id        String        @id @default(cuid())
  name      String
  plan      String        @default("basic")
  users     User[]
  documents Document[]    @relation("OrgDocuments")
  settings  OrgSettings?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

model Account {
  id               String     @id @default(cuid())
  name             String
  email            String?
  logoUrl          String?
  phone            String?
  domain           String?    @unique
  subdomain        String?    @unique
  leadsWebhookUrl  String?

  properties       Property[]
  leads            Lead[]

  seats            Int        @default(1)
  stripeCustomerId String?
  stripeSubId      String?
  // Per-subscriber CC override: null = follow global setting, true/false overrides
  ccFinanceOnResend Boolean?

  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Property {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String?
  address     String?
  heroImage   String?
  published   Boolean  @default(false)

  accountId   String?
  account     Account? @relation(fields: [accountId], references: [id])

  units       Unit[]
  images      Image[]
  leads       Lead[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  LOST
  CONVERTED
}

model Lead {
  id           String      @id @default(cuid())
  propertyId   String?
  accountId    String?

  name         String
  email        String
  phone        String?
  message      String?

  status       LeadStatus  @default(NEW)

  utmSource    String?
  utmMedium    String?
  utmCampaign  String?
  utmContent   String?
  utmTerm      String?
  sourceUrl    String?

  property     Property?   @relation(fields: [propertyId], references: [id])
  account      Account?    @relation(fields: [accountId], references: [id])

  subscriberId String
  subscriber   Subscriber  @relation(fields: [subscriberId], references: [id])

  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

// Image model used by Property
model Image {
  id         String   @id @default(cuid())
  propertyId String
  url        String
  alt        String?
  createdAt  DateTime @default(now())

  property   Property @relation(fields: [propertyId], references: [id])
}

model HistoryEvent {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  type        String
  details     String
  metadata    Json?

  createdAt   DateTime @default(now())
}

model Notification {
  id        String   @id @default(cuid())
  tenantId  String
  // tenant relation omitted to stay compatible if Tenant model differs
  type      String
  message   String
  read      Boolean  @default(false)

  createdAt DateTime @default(now())
}

model SubscriptionPlan {
  id           String   @id @default(cuid())
  name         String
  allowExports Boolean  @default(false)
  createdAt    DateTime @default(now())
}

model Subscriber {
  id                          String   @id @default(cuid())
  name                        String
  companyName                 String?  // optional alias for display
  logoUrl                     String?
  email                       String   @unique
  planId                      String?
  plan                        SubscriptionPlan? @relation(fields: [planId], references: [id])
  forceAllowExports           Boolean  @default(false)
  impersonationAlerts        Boolean?

  // Feature toggles
  enableReminders             Boolean  @default(false)
  // SA/SU override flags
  remindersEnabledByAdmin     Boolean  @default(true)

  // email/sms notification settings for leads etc
  notifyEmail                 Boolean  @default(true)
  notifySMS                   Boolean  @default(false)

  // Landing/pages-related flags (if present)
  enableLandingPages          Boolean  @default(false)
  enableCustomDomain          Boolean  @default(false)
  landingPagesEnabledByAdmin  Boolean  @default(true)
  customDomainEnabledByAdmin  Boolean  @default(true)

  // relations
  reminders                   Reminder[]

  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt
}

model Reminder {
  id           String   @id @default(cuid())
  tenantId     String?
  tenant       Tenant?  @relation(fields: [tenantId], references: [id])
  subscriberId String?
  subscriber   Subscriber? @relation(fields: [subscriberId], references: [id])

  leaseId      String?
  propertyId   String?

  type         String
  message      String
  sendAt       DateTime
  repeat       String?
  sentAt       DateTime?
  attempts     Int      @default(0)
  acknowledged Boolean  @default(false)
  status       String   @default("pending")

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ReminderLog {
  id          String   @id @default(cuid())
  reminderId  String
  reminder    Reminder @relation(fields: [reminderId], references: [id])

  initiatedBy String?
  channel     String
  status      String
  response    Json?
  note        String?

  createdAt   DateTime @default(now())

  @@index([reminderId])
  @@index([createdAt])
}

model WebhookSubscription {
  id           String   @id @default(cuid())
  name         String
  url          String
  event        String
  active       Boolean  @default(true)
  subscriberId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model ExternalWebhookEvent {
  id         String   @id @default(cuid())
  provider   String?
  payload    Json
  receivedAt DateTime @default(now())
  processed  Boolean  @default(false)
  notes      String?
}

model History {
  id           String    @id @default(cuid())
  userId       String
  subscriberId String?
  action       String
  details      String?
  createdAt    DateTime  @default(now())

  user         User      @relation(fields: [userId], references: [id])
  subscriber   Subscriber? @relation(fields: [subscriberId], references: [id])

  @@index([userId])
  @@index([subscriberId])
}

model ScheduledExport {
  id         String   @id @default(cuid())
  type       String
  frequency  String
  email      String
  active     Boolean  @default(true)
  suId       String
  su         User     @relation(fields: [suId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([suId])
}

model ImpersonationLog {
  id            String   @id @default(cuid())
  superAdminId  String
  targetUserId  String
  subscriberId  String?
  startedAt     DateTime @default(now())
  endedAt       DateTime?

  superAdmin    User     @relation(fields: [superAdminId], references: [id])
  targetUser    User     @relation(fields: [targetUserId], references: [id])
  subscriber    Subscriber? @relation(fields: [subscriberId], references: [id])

  @@index([superAdminId])
  @@index([targetUserId])
  @@index([subscriberId])
}

// --- the rest of the schema remains unchanged ---
