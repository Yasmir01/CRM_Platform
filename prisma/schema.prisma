generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  name               String?
  password           String
  role               String   @default("Subscriber") // "SU" | "SA" | "Subscriber"
  permissions        String?  // comma-separated per-user overrides e.g. "payments:read,maintenance:create"
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Subscription fields
  subscriptionPlan   String   @default("free") // basic, pro, enterprise, free
  subscriptionStatus String   @default("inactive") // active, canceled, past_due, inactive
  subscriptionId     String?  // Stripe subscription ID
  currentPeriodEnd   DateTime?

  // Relations
  contacts  Contact[]
  companies Company[]
  deals     Deal[]
  userRoles UserRole[]
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  // permissions stored as JSON mapping module -> { view, edit, delete }
  permissions Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userRoles   UserRole[]
}

model UserRole {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  roleId     String
  role       Role     @relation(fields: [roleId], references: [id])
  propertyId String?
  createdAt  DateTime @default(now())
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String?
  user   User?       @relation(fields: [userId], references: [id])

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  deals Deal[]
}

model Company {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  industry  String?
  website   String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId   String?
  user     User?      @relation(fields: [userId], references: [id])
  contacts Contact[]
  deals    Deal[]
  serviceProviders ServiceProvider[]
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  deals Deal[]
}

model Deal {
  id         String        @id @default(cuid())
  title      String
  amount     Float
  stage      String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  orgId     String
  org       Organization  @relation(fields: [orgId], references: [id])

  companyId String?
  company   Company?      @relation(fields: [companyId], references: [id])

  contactId String?
  contact   Contact?      @relation(fields: [contactId], references: [id])

  userId String?
  user   User?            @relation(fields: [userId], references: [id])
}

model ServiceProvider {
  id        String   @id @default(cuid())
  name      String
  serviceType String?
  email     String?
  phone     String?
  address   String?
  notes     String?

  companyId String
  company   Company  @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String?
  priority    String   @default("Low") // Low | Medium | High
  status      String   @default("Open") // Open | In Progress | Closed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Optional relations
  company            Company?         @relation(fields: [companyId], references: [id])
  companyId          String?

  contact            Contact?         @relation(fields: [contactId], references: [id])
  contactId          String?

  serviceProvider    ServiceProvider? @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId  String?
}

/// Subscriptions: separate table for landlord/property manager subscription records
model Subscription {
  id                    String   @id @default(cuid())
  user                  User     @relation(fields: [userId], references: [id])
  userId                String
  plan                  String   @default("free")    // free, basic, pro, enterprise
  status                String   @default("inactive")// active, canceled, past_due, inactive
  stripeSubscriptionId  String?  @unique
  currentPeriodEnd      DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

/// Tenant invites for onboarding flow
model TenantInvite {
  id         String   @id @default(cuid())
  tenantId   String?  // optional link to tenant record
  email      String
  token      String   @unique
  expiresAt  DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model VendorInvite {
  id         String   @id @default(cuid())
  vendorId   String?  // optional link to service provider record
  email      String
  name       String?
  category   String?
  token      String   @unique
  expiresAt  DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())
}

/// Lease management
model Lease {
  id          String   @id @default(cuid())
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
  unit        String
  tenantId    String?
  tenant      User?    @relation("LeaseTenant", fields: [tenantId], references: [id])
  rentAmount  Decimal  @db.Decimal(10, 2)
  deposit     Decimal? @db.Decimal(10, 2)
  startDate   DateTime
  endDate     DateTime
  status      String   @default("active")
  documentUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

/// Calendar events & tasks
model CalendarEvent {
  id         String   @id @default(cuid())
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id])
  title      String
  description String?
  category   String?
  dueDate    DateTime
  status     String   @default("open")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

/// Direct messaging
model DirectMessage {
  id        String   @id @default(cuid())
  senderId  String
  sender    User     @relation("DirectMessageSender", fields: [senderId], references: [id])
  receiverId String
  receiver  User     @relation("DirectMessageReceiver", fields: [receiverId], references: [id])
  propertyId String?
  property  Property? @relation(fields: [propertyId], references: [id])
  content   String
  channel   String   @default("in_app")
  status    String   @default("sent")
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  attachments DirectMessageAttachment[]
}

model DirectMessageAttachment {
  id        String   @id @default(cuid())
  messageId String
  message   DirectMessage @relation(fields: [messageId], references: [id])
  url       String
  filename  String?
  mimeType  String?
  createdAt DateTime @default(now())
}

/// Reminders & logs used by automation
model Reminder {
  id         String   @id @default(cuid())
  tenantId   String?
  tenant     User?    @relation(fields: [tenantId], references: [id])
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id])
  type       String
  dueAt      DateTime
  status     String   @default("PENDING")
  attempts   Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ReminderLog {
  id         String   @id @default(cuid())
  reminderId String
  reminder   Reminder @relation(fields: [reminderId], references: [id])
  channel    String
  status     String
  note       String?
  response   Json?
  createdAt  DateTime @default(now())
}

/// Transactions (basic)
model Transaction {
  id         String   @id @default(cuid())
  tenantId   String?
  tenant     User?    @relation(fields: [tenantId], references: [id])
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id])
  type       String
  amount     Decimal  @db.Decimal(12,2)
  status     String
  description String?
  createdAt  DateTime @default(now())
}

/// Rental applications / prospects
model Application {
  id             String   @id @default(cuid())
  propertyId     String
  property       Property @relation(fields: [propertyId], references: [id])
  unit           String?
  applicantName  String
  email          String
  phone          String?
  employment     String?
  income         Decimal? @db.Decimal(12,2)
  rentalHistory  String?
  references     String?
  status         String   @default("pending")
  documentUrl    String?
  screeningResult String?
  createdAt      DateTime @default(now())
}

/// Cached AI insights
model AIInsight {
  id          String   @id @default(cuid())
  userId      String?
  user        User?    @relation(fields: [userId], references: [id])
  propertyId  String?
  property    Property? @relation(fields: [propertyId], references: [id])
  category    String
  insight     String
  confidence  Decimal? @db.Decimal(5,2)
  generatedAt DateTime @default(now())
}

/// Documents repository
model Document {
  id          String   @id @default(cuid())
  propertyId  String?
  property    Property? @relation(fields: [propertyId], references: [id])
  tenantId    String?
  tenant      User?     @relation("DocumentTenant", fields: [tenantId], references: [id])
  vendorId    String?
  vendor      ServiceProvider? @relation(fields: [vendorId], references: [id])
  type        String
  title       String?
  fileUrl     String
  uploadedBy  String?
  visibility  String   @default("private")
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TaxReport {
  id         String   @id @default(cuid())
  landlordId String
  landlord   User     @relation(fields: [landlordId], references: [id])
  vendorId   String?
  vendor     User?    @relation(fields: [vendorId], references: [id])
  year       Int
  type       String
  fileUrl    String?
  createdAt  DateTime @default(now())
}
