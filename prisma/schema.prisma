// Prisma schema for CRM Subscription Plans and Monetization
// Provider: PostgreSQL (Neon)

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum BillingCycle {
  monthly
  yearly
}

enum ProductType {
  product
  addon
  service
  subscription
}

enum SubscriptionStatus {
  active
  trialing
  past_due
  canceled
  incomplete
  incomplete_expired
  unpaid
  paused
}

model SubscriptionPlan {
  id            String       @id @default(uuid())
  name          String
  price         Float        @default(0)
  billingCycle  BillingCycle @default(monthly)
  description   String?
  userLimit     Int          @default(1)
  propertyLimit Int          @default(10)
  isActive      Boolean      @default(true)
  features      String[]
  pages         String[]
  tools         String[]
  services      String[]
  paymentTypes  String[]
  backupTypes   String[]
  subscriptions Subscription[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  type        ProductType @default(product)
  price       Float       @default(0)
  isActive    Boolean     @default(true)
  category    String?
  tags        String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Subscriber {
  id          String         @id @default(uuid())
  email       String         @unique
  companyName String?
  subscriptions Subscription[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Subscription {
  id                   String              @id @default(uuid())
  subscriberId         String
  subscriber           Subscriber          @relation(fields: [subscriberId], references: [id])
  planId               String?
  plan                 SubscriptionPlan?   @relation(fields: [planId], references: [id])
  status               SubscriptionStatus  @default(active)
  startDate            DateTime            @default(now())
  endDate              DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  cancelAtPeriodEnd    Boolean             @default(false)
  payments             Payment[]
  revenueEvents        RevenueEvent[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Payment {
  id             String        @id @default(uuid())
  subscriptionId String
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
  amount         Float
  currency       String        @default("usd")
  status         String
  provider       String        @default("stripe")
  externalId     String?
  createdAt      DateTime      @default(now())
}

model RevenueEvent {
  id             String        @id @default(uuid())
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  type           String
  amount         Float
  metadata       Json?
  createdAt      DateTime      @default(now())
}
