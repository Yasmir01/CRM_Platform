generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(cuid())
  email              String   @unique
  name               String?
  password           String
  role               String   @default("Subscriber") // "SU" | "SA" | "Subscriber"
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Subscription fields
  subscriptionPlan   String   @default("free") // basic, pro, enterprise, free
  subscriptionStatus String   @default("inactive") // active, canceled, past_due, inactive
  subscriptionId     String?  // Stripe subscription ID
  currentPeriodEnd   DateTime?

  // Relations
  contacts  Contact[]
  companies Company[]
  deals     Deal[]
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String?
  user   User?       @relation(fields: [userId], references: [id])

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  deals Deal[]
}

model Company {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  industry  String?
  website   String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId   String?
  user     User?      @relation(fields: [userId], references: [id])
  contacts Contact[]
  deals    Deal[]
  serviceProviders ServiceProvider[]
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  deals Deal[]
}

model Deal {
  id         String        @id @default(cuid())
  title      String
  amount     Float
  stage      String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  orgId     String
  org       Organization  @relation(fields: [orgId], references: [id])

  companyId String?
  company   Company?      @relation(fields: [companyId], references: [id])

  contactId String?
  contact   Contact?      @relation(fields: [contactId], references: [id])

  userId String?
  user   User?            @relation(fields: [userId], references: [id])
}

model ServiceProvider {
  id        String   @id @default(cuid())
  name      String
  serviceType String?
  email     String?
  phone     String?
  address   String?
  notes     String?

  companyId String
  company   Company  @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String?
  priority    String   @default("Low") // Low | Medium | High
  status      String   @default("Open") // Open | In Progress | Closed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Optional relations
  company            Company?         @relation(fields: [companyId], references: [id])
  companyId          String?

  contact            Contact?         @relation(fields: [contactId], references: [id])
  contactId          String?

  serviceProvider    ServiceProvider? @relation(fields: [serviceProviderId], references: [id])
  serviceProviderId  String?
}

/// Subscriptions: separate table for landlord/property manager subscription records
model Subscription {
  id                    String   @id @default(cuid())
  user                  User     @relation(fields: [userId], references: [id])
  userId                String
  plan                  String   @default("free")    // free, basic, pro, enterprise
  status                String   @default("inactive")// active, canceled, past_due, inactive
  stripeSubscriptionId  String?  @unique
  currentPeriodEnd      DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

/// Tenant invites for onboarding flow
model TenantInvite {
  id         String   @id @default(cuid())
  tenantId   String?  // optional link to tenant record
  email      String
  token      String   @unique
  expiresAt  DateTime
  used       Boolean  @default(false)
  createdAt  DateTime @default(now())
}
