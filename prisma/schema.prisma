// Prisma schema for CRM Subscription Plans and Monetization
// Provider: PostgreSQL (Neon)

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- RBAC Users ---
enum Role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  OWNER
  VENDOR
  TENANT
}

model User {
  id               String             @id @default(cuid())
  email            String             @unique
  name             String?
  role             Role               @default(TENANT)
  permissions      String?
  orgId            String
  org              Organization       @relation(fields: [orgId], references: [id])
  stripeCustomerId String?
  defaultPmId      String?
  twoFactorEnabled Boolean            @default(false)
  twoFactorSecret  String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  preferences      TenantPreferences?

  @@index([orgId])
}

model Organization {
  id        String        @id @default(cuid())
  name      String
  plan      String        @default("basic")
  users     User[]
  settings  OrgSettings?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model OrgSettings {
  id                 String        @id @default(cuid())
  orgId              String        @unique
  exportSchedule     String        @default("daily")
  allowImpersonation Boolean       @default(false)
  organization       Organization  @relation(fields: [orgId], references: [id])
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model ImpersonationLog {
  id             String   @id @default(cuid())
  superAdminId   String?
  adminId        String?
  targetUserId   String
  startedAt      DateTime @default(now())
  endedAt        DateTime?
  notified       Boolean  @default(false)
}

model UserNotification {
  id        String   @id @default(cuid())
  userId    String
  message   String
  type      String?
  title     String?
  meta      Json?
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
}

enum BillingCycle {
  monthly
  yearly
}

enum ProductType {
  product
  addon
  service
  subscription
}

enum SubscriptionStatus {
  active
  trialing
  past_due
  canceled
  incomplete
  incomplete_expired
  unpaid
  paused
}

model SubscriptionPlan {
  id            String       @id @default(uuid())
  name          String
  price         Float        @default(0)
  billingCycle  BillingCycle @default(monthly)
  description   String?
  userLimit     Int          @default(1)
  propertyLimit Int          @default(10)
  isActive      Boolean      @default(true)
  features      String[]
  pages         String[]
  tools         String[]
  services      String[]
  paymentTypes  String[]
  backupTypes   String[]
  subscriptions Subscription[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String?
  type        ProductType @default(product)
  price       Float       @default(0)
  isActive    Boolean     @default(true)
  category    String?
  tags        String[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Subscriber {
  id          String         @id @default(uuid())
  email       String         @unique
  companyName String?
  subscriptions Subscription[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Subscription {
  id                   String              @id @default(uuid())
  subscriberId         String
  subscriber           Subscriber          @relation(fields: [subscriberId], references: [id])
  planId               String?
  plan                 SubscriptionPlan?   @relation(fields: [planId], references: [id])
  status               SubscriptionStatus  @default(active)
  startDate            DateTime            @default(now())
  endDate              DateTime?
  stripeCustomerId     String?
  stripeSubscriptionId String?
  cancelAtPeriodEnd    Boolean             @default(false)
  payments             Payment[]
  revenueEvents        RevenueEvent[]
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
}

model Payment {
  id             String        @id @default(uuid())
  subscriptionId String
  subscription   Subscription  @relation(fields: [subscriptionId], references: [id])
  amount         Float
  currency       String        @default("usd")
  status         String
  provider       String        @default("stripe")
  externalId     String?
  createdAt      DateTime      @default(now())
}

model RevenueEvent {
  id             String        @id @default(uuid())
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  type           String
  amount         Float
  metadata       Json?
  createdAt      DateTime      @default(now())
}

/// ----------------------------------------------------------
///  NEW MODELS FOR TENANTâ€‘LEDGER / PAST BALANCES
/// ----------------------------------------------------------

enum LeaseStatus {
  ACTIVE
  TERMINATED   // tenant moved out but balance may still exist
  CLOSED       // all balances settled, can be archived
}

enum EntryType {
  RENT
  DEPOSIT
  FEE
  PAYMENT
  ADJUSTMENT
}

model Property {
  id        String   @id @default(uuid())
  orgId     String?
  ownerId   String?
  address   String
  units     Unit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orgId])
  @@index([ownerId])
}

model Unit {
  id         String   @id @default(uuid())
  number     String
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])
  leases     Lease[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([propertyId])
  @@unique([propertyId, number])
}

model Tenant {
  id        String   @id @default(uuid())
  name      String
  email     String?
  leases    Lease[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TenantPreferences {
  id                 String   @id @default(cuid())
  userId             String   @unique
  smsOptIn           Boolean  @default(false)
  emailOptIn         Boolean  @default(true)
  autopayEnabled     Boolean  @default(false)
  autopayDayOverride Int?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user               User     @relation(fields: [userId], references: [id])
}

model Lease {
  id            String        @id @default(uuid())
  unitId        String
  tenantId      String
  orgId         String?
  startDate     DateTime
  endDate       DateTime?
  status        LeaseStatus   @default(ACTIVE)
  archived      Boolean       @default(false)
  rentAmount    Float?
  dueDay        Int?
  unit          Unit          @relation(fields: [unitId], references: [id])
  tenant        Tenant        @relation(fields: [tenantId], references: [id])
  ledgerEntries LedgerEntry[]
  renewalSettings LeaseRenewalSetting[]

  @@index([status])
  @@index([tenantId])
  @@index([unitId])
}

model LedgerEntry {
  id          String    @id @default(uuid())
  leaseId     String
  lease       Lease     @relation(fields: [leaseId], references: [id])
  date        DateTime  @default(now())
  description String
  amountCents Int       // positive = charge, negative = payment
  type        EntryType

  @@index([leaseId])
}

// --- Recurring maintenance automation ---
enum RecurrenceFrequency {
  DAY
  WEEK
  MONTH
  QUARTER
  YEAR
}

model RecurringTask {
  id          String               @id @default(cuid())
  propertyId  String
  unitId      String?
  title       String
  description String?
  frequency   RecurrenceFrequency
  interval    Int                  @default(1)
  nextRunAt   DateTime
  lastRunAt   DateTime?
  vendorId    String?
  isActive    Boolean              @default(true)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  property    Property             @relation(fields: [propertyId], references: [id])
  unit        Unit?                @relation(fields: [unitId], references: [id])

  @@index([propertyId])
  @@index([unitId])
  @@index([isActive, nextRunAt])
}

model MaintenanceRequest {
  id          String   @id @default(cuid())
  tenantId    String?
  orgId       String?
  propertyId  String
  unitId      String?
  title       String
  description String?
  status      String   @default("open") // open, in_progress, completed, canceled
  priority    String   @default("normal")  // low, normal, high, emergency
  assignedTo  String?
  vendorId    String?
  createdById String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  property    Property @relation(fields: [propertyId], references: [id])
  unit        Unit?    @relation(fields: [unitId], references: [id])

  @@index([propertyId])
  @@index([unitId])
  @@index([status])
  @@index([orgId])
  @@index([tenantId])
}

/// Owner Ledger models
model OwnerPayment {
  id         String   @id @default(cuid())
  tenantId   String
  orgId      String?
  propertyId String
  amount     Float
  date       DateTime @default(now())
  type       String

  property   Property @relation(fields: [propertyId], references: [id])

  @@index([propertyId])
  @@index([orgId])
  @@index([tenantId])
}

model OwnerExpense {
  id          String   @id @default(cuid())
  orgId       String?
  propertyId  String
  amount      Float
  category    String
  description String?
  date        DateTime @default(now())

  property    Property @relation(fields: [propertyId], references: [id])

  @@index([propertyId])
  @@index([orgId])
}

/// Payment Plans
model PaymentPlan {
  id         String   @id @default(cuid())
  orgId      String
  tenantId   String
  leaseId    String
  title      String
  total      Float
  status     String   @default("active")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  installments PaymentPlanInstallment[]

  tenant     User     @relation(fields: [tenantId], references: [id])

  @@index([orgId])
  @@index([tenantId])
}

model PaymentPlanInstallment {
  id            String   @id @default(cuid())
  planId        String
  dueDate       DateTime
  amount        Float
  paidAmount    Float   @default(0)
  status        String  @default("due")
  createdAt     DateTime @default(now())

  plan PaymentPlan @relation(fields: [planId], references: [id])

  @@index([planId])
  @@index([status])
  @@index([dueDate])
}

/// Autopay Attempts
model AutopayAttempt {
  id        String   @id @default(cuid())
  tenantId  String
  leaseId   String
  orgId     String?
  amount    Float
  runAt     DateTime @default(now())
  status    String   @default("failed")
  errorMsg  String?
  tryCount  Int      @default(1)
  createdAt DateTime @default(now())

  tenant    User     @relation(fields: [tenantId], references: [id])

  @@index([tenantId])
  @@index([leaseId])
  @@index([status])
}

/// Messaging
model MessageThread {
  id         String    @id @default(cuid())
  orgId      String
  subject    String
  propertyId String?
  createdAt  DateTime  @default(now())
  messages   Message[]

  org        Organization @relation(fields: [orgId], references: [id])
  property   Property?    @relation(fields: [propertyId], references: [id])

  @@index([orgId])
  @@index([propertyId])
}

model Message {
  id        String        @id @default(cuid())
  threadId  String
  senderId  String
  content   String
  createdAt DateTime      @default(now())

  thread    MessageThread @relation(fields: [threadId], references: [id])
  sender    User          @relation(fields: [senderId], references: [id])

  @@index([threadId])
  @@index([senderId])
}

/// Accounting Integration per org
model AccountingIntegration {
  id           String   @id @default(cuid())
  orgId        String
  provider     String   // quickbooks | xero | freshbooks
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([orgId])
  @@index([provider])
}

/// Tenant Applications
model TenantApplication {
  id             String               @id @default(cuid())
  orgId          String
  propertyId     String
  applicantName  String
  email          String
  phone          String?
  moveInDate     DateTime?
  status         String               @default("pending") // pending, under_review, approved, denied
  decisionNote   String?
  decidedAt      DateTime?
  decidedBy      String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  documents      ApplicationDocument[]
  screenings     TenantScreening[]

  @@index([orgId])
  @@index([propertyId])
  @@index([status])
}

model ApplicationDocument {
  id        String   @id @default(cuid())
  appId     String
  type      String
  url       String
  createdAt DateTime @default(now())

  application TenantApplication @relation(fields: [appId], references: [id])

  @@index([appId])
}

model TenantScreening {
  id        String   @id @default(cuid())
  appId     String
  provider  String
  status    String   // pending, in_progress, completed, failed
  reportUrl String?
  rawData   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  application TenantApplication @relation(fields: [appId], references: [id])

  @@index([appId])
  @@index([provider])
  @@index([status])
}

model TenantScreeningConsent {
  id          String   @id @default(cuid())
  screeningId String
  appId       String
  tenantEmail String
  consented   Boolean  @default(false)
  consentedAt DateTime?
  ipAddress   String?
  createdAt   DateTime @default(now())

  @@index([screeningId])
  @@index([appId])
}

model LeaseTemplate {
  id          String   @id @default(cuid())
  orgId       String
  name        String
  description String?
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LeaseDocument {
  id              String   @id @default(cuid())
  orgId           String
  propertyId      String
  tenantId        String
  templateId      String?
  title           String
  html            String
  signedPdfUrl    String?
  generatedPdfUrl String?
  status          String   @default("draft")
  envelopeId      String?
  renewalOfId     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  renewalOf       LeaseDocument? @relation("RenewalChain", fields: [renewalOfId], references: [id])
  renewals        LeaseDocument[] @relation("RenewalChain")
}

model SignatureEvent {
  id          String   @id @default(cuid())
  envelopeId  String
  type        String
  payload     Json?
  createdAt   DateTime @default(now())
}

model LeaseSigner {
  id              String   @id @default(cuid())
  leaseDocumentId String
  role            String
  name            String
  email           String
  order           Int      @default(1)
  status          String   @default("pending")
  signedAt        DateTime?
  createdAt       DateTime @default(now())

  leaseDocument   LeaseDocument @relation(fields: [leaseDocumentId], references: [id])

  @@index([leaseDocumentId])
}

model LeaseRenewalSetting {
  id          String   @id @default(cuid())
  leaseId     String
  notify60    Boolean  @default(true)
  notify30    Boolean  @default(true)
  notify15    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lease       Lease    @relation(fields: [leaseId], references: [id])

  @@index([leaseId])
}

/// Document Management System
model Document {
  id          String        @id @default(cuid())
  orgId       String
  uploadedBy  String
  tenantId    String?
  leaseId     String?
  type        String
  name        String
  url         String
  createdAt   DateTime      @default(now())

  org         Organization  @relation(fields: [orgId], references: [id])
  uploader    User          @relation(fields: [uploadedBy], references: [id])
  tenant      Tenant?       @relation(fields: [tenantId], references: [id])
  lease       Lease?        @relation(fields: [leaseId], references: [id])

  @@index([orgId])
  @@index([tenantId])
  @@index([leaseId])
  @@index([uploadedBy])
}

model RentPayment {
  id            String   @id @default(cuid())
  leaseId       String
  tenantId      String
  amount        Float
  method        String
  status        String   @default("pending")
  transactionId String?
  paidAt        DateTime?
  createdAt     DateTime @default(now())

  lease         LeaseDocument @relation(fields: [leaseId], references: [id])

  @@index([leaseId])
  @@index([tenantId])
  @@index([status])
}
