generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("Subscriber") // "SU" | "SA" | "Subscriber"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  contacts  Contact[]
  companies Company[]
  deals     Deal[]
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String?
  user   User?       @relation(fields: [userId], references: [id])

  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])

  deals Deal[]
}

model Company {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  industry  String?
  website   String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId   String?
  user     User?      @relation(fields: [userId], references: [id])
  contacts Contact[]
  deals    Deal[]
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  deals Deal[]
}

model Deal {
  id         String        @id @default(cuid())
  title      String
  amount     Float
  stage      String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Relations
  orgId     String
  org       Organization  @relation(fields: [orgId], references: [id])

  companyId String?
  company   Company?      @relation(fields: [companyId], references: [id])

  contactId String?
  contact   Contact?      @relation(fields: [contactId], references: [id])

  userId String?
  user   User?            @relation(fields: [userId], references: [id])
}

model ServiceProvider {
  id        String   @id @default(cuid())
  name      String
  category  String
  phone     String
  email     String
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Optional relation to Company
  companyId String?
  company   Company? @relation(fields: [companyId], references: [id])
}

model Ticket {
  id          String   @id @default(cuid())
  title       String
  description String?
  priority    String   @default("Low") // Low | Medium | High
  status      String   @default("Open") // Open | In Progress | Closed
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Optional relations
  company   Company?   @relation(fields: [companyId], references: [id])
  companyId String?

  contact   Contact?   @relation(fields: [contactId], references: [id])
  contactId String?
}
