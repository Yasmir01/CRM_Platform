// Prisma schema for CRM Subscription Plans and Monetization
// Provider: PostgreSQL (Neon)

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- RBAC Users ---
enum Role {
  SUPER_ADMIN
  ADMIN
  MANAGER
  OWNER
  VENDOR
  TENANT
}

model User {
  id                     String         @id @default(cuid())
  email                  String         @unique
  name                   String?
  role                   Role           @default(TENANT)
  permissions            String?
  autopayEnabled         Boolean        @default(false)
  stripeCustomerId       String?
  defaultPaymentMethodId String?
  orgId                  String
  org                    Organization   @relation(fields: [orgId], references: [id])
  accountId              String
  account                Account       @relation(fields: [accountId], references: [id])
  createdAt              DateTime       @default(now())
  updatedAt              DateTime       @updatedAt

  // Back-relations
  rentPayments           RentPayment[]  @relation("TenantRentPayments")
  lateFees               LateFee[]      @relation("TenantLateFees")
  refunds                Refund[]       @relation("TenantRefunds")
  autopay                AutoPay?       @relation("TenantAutoPay")
  ownerLedgers           OwnerLedger[]  @relation("OwnerLedgers")
  uploadedDocuments      Document[]     @relation("UserUploadedDocuments")
  vendorInvoices         MaintenanceInvoice[] @relation("VendorMaintenanceInvoices")
  directMessagesSent     DirectMessage[]      @relation("DirectMessagesSent")
  directMessagesReceived DirectMessage[]      @relation("DirectMessagesReceived")

  @@index([orgId])
}

model Organization {
  id        String        @id @default(cuid())
  name      String
  plan      String        @default("basic")
  users     User[]
  documents Document[]    @relation("OrgDocuments")
  settings  OrgSettings?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum Plan {
  FREE
  PRO
  ENTERPRISE
}

model Account {
  id               String     @id @default(cuid())
  name             String
  email            String?
  logoUrl          String?
  phone            String?
  domain           String?    @unique
  subdomain        String?    @unique
  leadsWebhookUrl  String?

  properties       Property[]
  leads            Lead[]

  seats            Int        @default(1)
  stripeCustomerId String?
  stripeSubId      String?
  // Per-subscriber CC override: null = follow global setting, true/false overrides
  ccFinanceOnResend Boolean?

  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
}

model Property {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  description String?
  address     String?
  heroImage   String?
  published   Boolean  @default(false)

  accountId   String?
  account     Account? @relation(fields: [accountId], references: [id])

  units       Unit[]
  images      Image[]
  leads       Lead[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Lead {
  id          String   @id @default(cuid())
  propertyId  String
  accountId   String?

  name        String
  email       String
  phone       String?
  message     String?

  utmSource   String?
  utmMedium   String?
  utmCampaign String?
  utmContent  String?
  utmTerm     String?
  sourceUrl   String?

  property    Property @relation(fields: [propertyId], references: [id])
  account     Account? @relation(fields: [accountId], references: [id])

  createdAt   DateTime @default(now())
}

// Image model used by Property
model Image {
  id         String   @id @default(cuid())
  propertyId String
  url        String
  alt        String?
  createdAt  DateTime @default(now())

  property   Property @relation(fields: [propertyId], references: [id])
}

model Reminder {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  type        String
  message     String
  dueDate     DateTime
  status      String   @default("pending")

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HistoryEvent {
  id          String   @id @default(cuid())
  tenantId    String
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  type        String
  details     String
  metadata    Json?

  createdAt   DateTime @default(now())
}

// --- the rest of the schema remains unchanged ---
