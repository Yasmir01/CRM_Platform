datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ============================================================
// Core Enums
// ============================================================
enum BillingCycle {
  MONTHLY
  YEARLY
}

enum ProductType {
  SUBSCRIPTION
  ADDON
}

enum SubscriptionStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  UNPAID
  PAUSED
}

// ============================================================
// Accounts & Organizations
// ============================================================
model Account {
  id               String   @id @default(cuid())
  name             String
  domain           String?
  subdomain        String?
  stripeCustomerId String?
  stripeSetupIntentId String?
  subscription     Subscription?
  organizations    Organization[]
  properties       Property[]
  users            User[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Organization {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(255)
  users     User[]
  documents Document[]   @relation("OrgDocuments")
  settings  OrgSettings?
  units     Unit[]

  @@unique([name])
}

// ============================================================
// Subscription & Billing
// ============================================================
model SubscriptionPlan {
  id             String   @id @default(cuid())
  name           String
  description    String?
  priceId        String?   // Stripe priceId
  amount         Float
  currency       String    @default("usd")
  cycle          BillingCycle
  userLimit      Int?
  propertyLimit  Int?
  features       Json?
  tools          Json?
  services       Json?
  escalation     EscalationMatrix[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Subscription {
  id                   String             @id @default(cuid())
  accountId            String
  account              Account            @relation(fields: [accountId], references: [id])
  planId               String
  plan                 SubscriptionPlan   @relation(fields: [planId], references: [id])
  status               SubscriptionStatus
  trialEndsAt          DateTime?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  stripeSubscriptionId String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
}

model Payment {
  id            String    @id @default(cuid())
  subscriptionId String
  subscription  Subscription @relation(fields: [subscriptionId], references: [id])
  amount        Float
  currency      String   @default("usd")
  status        String
  method        String?
  reference     String?
  createdAt     DateTime @default(now())
}

model RevenueEvent {
  id         String   @id @default(cuid())
  type       String
  amount     Float
  currency   String   @default("usd")
  timestamp  DateTime @default(now())
  metadata   Json?
}

model BillingInvoice {
  id             String   @id @default(cuid())
  subscriptionId String
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  amount         Float
  currency       String @default("usd")
  status         String
  dueDate        DateTime?
  paidAt         DateTime?
  createdAt      DateTime @default(now())
}

model StripeEvent {
  id        String   @id @default(cuid())
  type      String
  payload   Json
  createdAt DateTime @default(now())
}

// ============================================================
// Properties & Escalation / SLA
// ============================================================
model Property {
  id              String        @id @default(cuid())
  name            String
  address         String?
  organizationId  String
  organization    Organization  @relation(fields: [organizationId], references: [id])
  escalation      EscalationMatrix[]
  leases          Lease[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model EscalationMatrix {
  id                  String              @id @default(cuid())
  level               Int
  description         String?
  notifyEmail         String?
  propertyId          String?
  property            Property?           @relation(fields: [propertyId], references: [id])
  subscriptionPlanId  String?
  subscriptionPlan    SubscriptionPlan?   @relation(fields: [subscriptionPlanId], references: [id])
  createdAt           DateTime @default(now())
}

model SLAConfig {
  id                  String   @id @default(cuid())
  responseTimeHours   Int
  resolutionTimeHours Int
  propertyId          String?
  property            Property? @relation(fields: [propertyId], references: [id])
  createdAt           DateTime @default(now())
}

// ============================================================
// Rent & Ledger
// ============================================================
model Lease {
  id          String   @id @default(cuid())
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id])
  tenantId    String
  tenant      User     @relation(fields: [tenantId], references: [id])
  startDate   DateTime
  endDate     DateTime
  rentAmount  Float
  currency    String   @default("usd")
  ledger      LedgerEntry[]
  createdAt   DateTime @default(now())
}

model LedgerEntry {
  id        String   @id @default(cuid())
  leaseId   String
  lease     Lease    @relation(fields: [leaseId], references: [id])
  type      String
  amount    Float
  createdAt DateTime @default(now())
}

model RentPayment {
  id        String   @id @default(cuid())
  amount    Float
  date      DateTime @default(now())
  tenant    Tenant   @relation("TenantRentPayments", fields: [tenantId], references: [id])
  tenantId  String

  @@index([tenantId, date])
}

model LateFee {
  id        String   @id @default(cuid())
  amount    Float
  date      DateTime @default(now())
  tenant    Tenant   @relation("TenantLateFees", fields: [tenantId], references: [id])
  tenantId  String

  @@index([tenantId, date])
}

model AutoPay {
  id        String   @id @default(cuid())
  active    Boolean  @default(false)
  tenant    Tenant   @relation("TenantAutoPay", fields: [tenantId], references: [id])
  tenantId  String   @unique  // One autopay per tenant
}

model Refund {
  id        String   @id @default(cuid())
  paymentId String
  payment   Payment  @relation(fields: [paymentId], references: [id])
  amount    Float
  reason    String?
  createdAt DateTime @default(now())
}

// ============================================================
// Documents & Attachments
// ============================================================
model Document {
  id        String   @id @default(cuid())
  leaseId   String?
  lease     Lease?   @relation(fields: [leaseId], references: [id])
  url       String
  type      String
  createdAt DateTime @default(now())
}

model MaintenanceAttachment {
  id        String   @id @default(cuid())
  propertyId String
  property  Property @relation(fields: [propertyId], references: [id])
  url       String
  type      String
  createdAt DateTime @default(now())
}

model MaintenanceInvoice {
  id        String   @id @default(cuid())
  propertyId String
  property  Property @relation(fields: [propertyId], references: [id])
  amount    Float
  createdAt DateTime @default(now())
}

// ============================================================
// Accounting Integrations
// ============================================================
model AccountingConnection {
  id        String   @id @default(cuid())
  accountId String
  account   Account  @relation(fields: [accountId], references: [id])
  provider  String
  status    String
  createdAt DateTime @default(now())
}

model AccountingSyncLog {
  id          String   @id @default(cuid())
  connectionId String
  connection   AccountingConnection @relation(fields: [connectionId], references: [id])
  status      String
  details     Json?
  createdAt   DateTime @default(now())
}

model AccountingInvoice {
  id        String   @id @default(cuid())
  connectionId String
  connection   AccountingConnection @relation(fields: [connectionId], references: [id])
  amount    Float
  status    String
  createdAt DateTime @default(now())
}

model AccountingPayment {
  id        String   @id @default(cuid())
  connectionId String
  connection   AccountingConnection @relation(fields: [connectionId], references: [id])
  amount    Float
  status    String
  createdAt DateTime @default(now())
}

model AccountingContact {
  id        String   @id @default(cuid())
  connectionId String
  connection   AccountingConnection @relation(fields: [connectionId], references: [id])
  name      String
  email     String?
  createdAt DateTime @default(now())
}

// ============================================================
// Notifications
// ============================================================
model Notification {
  id        String   @id @default(cuid())
  type      String
  message   String
  createdAt DateTime @default(now())
}

model UserNotification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  notificationId String
  notification   Notification @relation(fields: [notificationId], references: [id])
  readAt    DateTime?
  createdAt DateTime @default(now())
}

// ============================================================
// Utilities & Logs
// ============================================================
model TempCode {
  id        String   @id @default(cuid())
  code      String
  type      String
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model ReportPreference {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  preferences Json
  createdAt DateTime @default(now())
}

model OrgSettings {
  id                 String        @id @default(cuid())
  orgId              String        @unique
  exportSchedule     String        @default("daily")
  allowImpersonation Boolean       @default(false)
  allowExport        Boolean       @default(true)
  organization       Organization  @relation(fields: [orgId], references: [id])
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

model GlobalSettings {
  id                 String  @id @default(cuid())
  allowImpersonation Boolean @default(false)
  createdAt          DateTime @default(now())
}

model ImpersonationLog {
  id            String   @id @default(cuid())
  superAdminId  String
  superAdmin    User     @relation("SuperAdminLogs", fields: [superAdminId], references: [id])
  subscriberId  String
  subscriber    User     @relation("SubscriberLogs", fields: [subscriberId], references: [id])
  startedAt     DateTime @default(now())
  endedAt       DateTime?
  alertSent     Boolean  @default(true)
}

// ============================================================
// User model (kept minimal here, adjust as needed)
// ============================================================
model User {
  id                    String          @id @default(cuid())
  email                 String          @unique
  name                  String?         @db.VarChar(255)
  // 🔗 Direct Messages
  directMessagesSent     DirectMessage[] @relation("DirectMessagesSent")
  directMessagesReceived DirectMessage[] @relation("DirectMessagesReceived")
  uploadedDocuments      Document[]      @relation("UserUploadedDocuments")

  @@index([name])
}

model Tenant {
  id                  String               @id @default(cuid())
  name                String               @db.VarChar(255)
  // 🔗 Relations
  rentPayments        RentPayment[]        @relation("TenantRentPayments")
  lateFees            LateFee[]            @relation("TenantLateFees")
  refunds             Refund[]             @relation("TenantRefunds")
  autopay             AutoPay?             @relation("TenantAutoPay")
  ownerLedgers        OwnerLedger[]        @relation("OwnerLedgers")
  uploadedDocuments   Document[]           @relation("UserUploadedDocuments")
  vendorInvoices      MaintenanceInvoice[] @relation("VendorMaintenanceInvoices")

  @@index([name])
}

model OwnerLedger {
  id        String   @id @default(cuid())
  balance   Float    @default(0)
  tenant    Tenant   @relation("OwnerLedgers", fields: [tenantId], references: [id])
  tenantId  String

  @@index([tenantId])
}

model DirectMessage {
  id        String   @id @default(cuid())
  content   String
  sentAt    DateTime @default(now())
  sender    User     @relation("DirectMessagesSent", fields: [senderId], references: [id])
  senderId  String
  receiver  User     @relation("DirectMessagesReceived", fields: [receiverId], references: [id])
  receiverId String

  @@index([senderId, sentAt])
  @@index([receiverId, sentAt])
}

model Unit {
  id        String   @id @default(cuid())
  name      String   @db.VarChar(255)
  tenants   Tenant[]

  @@unique([name])
}
